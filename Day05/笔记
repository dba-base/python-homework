alex博客：http://www.cnblogs.com/alex3714/articles/5161349.html#commentform
林海峰：http://egon09.blog.51cto.com/9161406/1840425
ATM优秀作业：1. http://www.cnblogs.com/wushank/archive/2016/03/06/5248916.html
            2.


模块:
|-- 1.定义：用来从逻辑上组织python代码（变量，函数，类，逻辑：实现一个功能），本质就是.py结尾的python文件
|     包：用来从逻辑上组织模块的，本质就是一个目录（带__init__.py文件）
|
|-- 2.导入方法:
|    import module_name   说明：module_name = all_code 使用：module_name.变量 module_name.方法
|    import module_name1,module_name2, .....
|    from module01 import *    导入所有模块
|    from module01 import logger as logger_alex   说明：方法重复时，导入module中的一个变量或者方法，直接使用
|
|-- 3.import 本质 ：导入python模块的本质就是把python文件解释一遍,导入包的本质就是解释__init__.py文件
|     import module_name ---->　module_name.py ----> module_name.py 的路径  ----> sys.path
|
|-- 4.导入优化
|     from module_test import test
|
|-- 5.模块的分类
|   --> 标准库：time,datatime，random,os,sys，shutil,json,pickle,shelve,xml模块，
|              PyYAML,configparser,hashlib,logging,re
|   --> 开源模块
|   --> 自定义模块
|
|   shutil 模块：http://www.cnblogs.com/wupeiqi/articles/4963027.html
|   xml处理模块：https://docs.python.org/2/library/xml.etree.elementtree.html#modifying-an-xml-file
|   PyYAML模块：http://pyyaml.org/wiki/PyYAMLDocumentation
|   configparser模块：修改类似与Mysql的配置文件，如文件example.ini
|   Subprocess模块：替换：os.system
|                       os.spawn*
|   logging模块：
|   re模块：爬虫，日常使用Google


re模块：
|    https://www.runoob.com/python/python-reg-expressions.html
|    '.'    --- 默认匹配除\n之外的任意一个字符，若指定flag DOTALL,则匹配任意字符，包括换行
|    '^'    --- 匹配字符开头，若指定flags MULTILINE,这种也可以匹配上(r"^a","\nabc\neee",flags=re.MULTILINE)
|    '$'    --- 匹配字符结尾，或e.search("foo$","bfoo\nsdfsf",flags=re.MULTILINE).group()也可以
|    '*'    --- 匹配*号前的字符0次或多次，re.findall("ab*","cabb3abcbbac")  结果为['abb', 'ab', 'a']
|    '+'    --- 匹配前一个字符1次或多次，re.findall("ab+","ab+cd+abb+bba") 结果['ab', 'abb']
|    '?'    --- 匹配前一个字符1次或0次
|    '{m}'  --- 匹配前一个字符m次
|    '{n,m}'--- 匹配前一个字符n到m次，re.findall("ab{1,3}","abb abc abbcbbb") 结果'abb', 'ab', 'abb']
|    '|'    --- 匹配|左或|右的字符，re.search("abc|ABC","ABCBabcCD").group() 结果'ABC'
|    '(...)'--- 分组匹配，re.search("(abc){2}a(123|456)c", "abcabca456c").group() 结果 abcabca456c
|
|
|    '\A'   --- 只从字符开头匹配，re.search("\Aabc","alexabc") 是匹配不到的
|    '\Z'   --- 匹配字符结尾，同$
|    '\d'   --- 匹配数字0-9
|    '\D'   --- 匹配非数字
|    '\w'   --- 匹配[A-Za-z0-9]
|    '\W'   --- 匹配非[A-Za-z0-9]
|    '\s'    --- 匹配空白字符、\t、\n、\r , re.search("\s+","ab\tc1\n3").group() 结果 '\t'
|    [^...]	 ---不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符,
                例如：[^0-9\.\-\+\*\/\%\/\/\*\*\(\)] 匹配不是数字，不是 . - + .. 的字符
|    '(?P<name>...)' 分组匹配，必须连续匹配
|       re.search("(?P<province>[0-9]{4})(?P<city>[0-9]{2})(?P<birthday>[0-9]{4})","371481199306143242").groupdict("city")
|       结果{'province': '3714', 'city': '81', 'birthday': '1993'}

re.match    从头开始匹配
re.search   匹配包含
re.findall  把所有匹配到的字符放到以列表中的元素返回
re.splitall 以匹配到的字符当做列表分隔符
re.sub      匹配字符并替换
